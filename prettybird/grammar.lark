?start: (function_definition | character)+

function_definition: "define" IDENTIFIER function_parameter_list steps_statements

// Was concerned about parameter lists like in "define test(a, b, c,)" but python allows trailing commas
// so we should allow it too
function_parameter_list: "(" [function_parameters] ")"
function_parameters: CNAME "," function_parameters
                   | CNAME
    
character: "char" IDENTIFIER ("encoding=" INT)? "{" "base" "{" base_statement "}" "steps" steps_statements "}"

?base_statement: blank_statement
               | constant_base_statement
               | from_character_base_statement

blank_statement: "blank" "(" INT "," INT ")"

constant_base_statement: CONSTANT_BASE_STATEMENT_CHARACTER+ "," constant_base_statement
                       | CONSTANT_BASE_STATEMENT_CHARACTER+ ","
                       | CONSTANT_BASE_STATEMENT_CHARACTER+

from_character_base_statement: "from_char" "(" IDENTIFIER ")"

steps_statements: "{" "}"
                | "{" step_statement+ "}"

step_statement: UPDATE_MODE FILLED? HALF? step
              | UPDATE_MODE HALF? FILLED? step
              | function_call_step
              | stop_statement

step: point_step
    | vector_step
    | circle_step
    | ellipse_step
    | square_step
    | rectangle_step
    | bezier_step

// Just this point
point_step: "point" "(" expression ")"

// Line from first point to second point
vector_step: "vector" "(" expression "," expression ")"

// Circle with center at point and with radius NUM
circle_step: "circle" "(" expression "," expression ")"

// Ellipse with center at point, width NUM, height NUM
// or an ellipse within the rectangle defined by bottomleft=point, topright=point
ellipse_step: "ellipse" "(" expression "," expression "," expression ")"
            | "ellipse" "(" expression "," expression ")"

// Square with top left at point and side length NUM
square_step: "square" "(" expression "," expression ")"

// Rectangle with top left at point, width NUM, height NUM
rectangle_step: "rectangle" "(" expression "," expression "," expression ")"

bezier_step: "bezier" "(" expression "," expression "," expression ")"

function_call_step: CNAME "(" [function_call_parameters] ")"
function_call_parameters: type "," function_call_parameters
                        | type

stop_statement: "stop" "if" expression COMPARATOR expression
              | "stop"

point: "(" expression "," expression ")"

?type: point_type | expression

?point_type: point | CNAME

?power_expression: (number_type | point)
                 | power_expression "^" (number_type | point) -> pow_expr

?multiplicative_expression: power_expression
                          | multiplicative_expression "*" power_expression -> mul_expr
                          | multiplicative_expression "/" power_expression -> div_expr
                          | multiplicative_expression "%" power_expression -> mod_expr

?additive_expression: multiplicative_expression
                    | additive_expression "+" multiplicative_expression -> add_expr
                    | additive_expression "-" multiplicative_expression -> sub_expr

?bitwise_and_expression: additive_expression
                       | bitwise_and_expression "and" additive_expression -> and_expr

?bitwise_xor_expr: bitwise_and_expression
                 | bitwise_xor_expr "xor" bitwise_and_expression -> xor_expr

?bitwise_or_expr: bitwise_xor_expr
                | bitwise_or_expr "or" bitwise_xor_expr -> or_expr

?expression: bitwise_or_expr

?number_type: (NUMBER | CNAME) -> positive_int
            | "-" (NUMBER | CNAME) -> negative_int
            | "(" expression ")"

UPDATE_MODE: ("draw" | "erase")

COMPARATOR: "<"
          | ">"
          | "<="
          | ">="
          | "=="
          | "!"

FILLED: "filled"

HALF: "half" "(" DIRECTION ")"

DIRECTION: ["top" | "bottom" | "left" | "right"]

CONSTANT_BASE_STATEMENT_CHARACTER: ("0" | ".")

IDENTIFIER: CNAME | DIGIT

SINGLE_LINE_COMMENT: "//" /[^\n]*/ "\n"

WHITESPACE: /\s+/

%ignore SINGLE_LINE_COMMENT
%ignore WHITESPACE
%ignore C_COMMENT

%import common.CNAME
%import common.INT
%import common.NUMBER
%import common.C_COMMENT
%import common.DIGIT
